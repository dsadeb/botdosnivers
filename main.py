from keep_alive import keep_alive
from dotenv import load_dotenv
import os
import discord
from discord.ext import tasks, commands
from datetime import datetime
import pytz

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Lista dos nomes em ordem de rod√≠zio (use os nomes de usu√°rio exatos do Discord, ex: "@Maria Fernanda")
rodizio = [
    "Julia Kliemann", "Kau√™ Kazuo Kubo", "Lucas Sadoski", "Maria Fernanda","Maria J√∫lia", "Mateus Silverio", "Matheus Beliz√°rio", 
    "Matheus Mello", "Milene Lopes", "Paulo Nogueira", "Pedro Balieiro", "Rodrigo", 
    "Agata Kojiio", "Aline Lima", "Arthur Tormena", "Cindy Grasiely", "D√©bora Sanches Aroca", 
    "Enzo Vieira", "√ârica Doneux", "Fabio", "Hemilly Silva Barbosa", "Jo√£o Birtche"
]

# Fuso-hor√°rio de Bras√≠lia
timezone = pytz.timezone('America/Sao_Paulo')

# Inicia√ß√£o do bot
intents = discord.Intents.default()
intents.members = True
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# Come√ßamos com a primeira pessoa da lista
index_atual = 0

@bot.event
async def on_ready():
    print(f"Bot conectado como {bot.user}")
    enviar_lembrete.start()

@bot.command(name='test')
async def test_lembrete(ctx):
    """Comando de teste para enviar lembrete imediatamente"""
    global index_atual

    nome_mencao = rodizio[index_atual % len(rodizio)]
    nome_limpo = nome_mencao.lower().strip("@").replace(" ", "")

    enviado = False
    for guild in bot.guilds:
        for member in guild.members:
            member_name_clean = member.display_name.lower().replace(" ", "")
            if nome_limpo in member_name_clean or member_name_clean in nome_limpo:
                try:
                    await member.send(f"üß™ TESTE: Oi {member.display_name}! Hoje √© sua vez de tirar o lixo no escrit√≥rio! ‚ú®üö©üóëÔ∏è")
                    await ctx.send(f"Mensagem de teste enviada para {member.display_name}")
                    enviado = True
                    break
                except Exception as e:
                    await ctx.send(f"N√£o consegui enviar para {member.display_name}: {e}")
        if enviado:
            break

    if enviado:
        index_atual += 1
        await ctx.send(f"Pr√≥xima pessoa ser√°: {rodizio[index_atual % len(rodizio)]}")
    else:
        await ctx.send(f"Membro n√£o encontrado: {nome_mencao}")

@tasks.loop(minutes=1)
async def enviar_lembrete():
    global index_atual
    agora = datetime.now(timezone)

    # Verifica se √© segunda-feira e 09:00 - lembrete semanal
    if agora.weekday() == 0 and agora.hour == 9 and agora.minute == 0:
        nome_mencao = rodizio[index_atual % len(rodizio)]
        nome_limpo = nome_mencao.lower().strip("@").replace(" ", "")

        enviado = False
        for guild in bot.guilds:
            for member in guild.members:
                member_name_clean = member.display_name.lower().replace(" ", "")
                if nome_limpo in member_name_clean or member_name_clean in nome_limpo:
                    try:
                        await member.send(f"üóìÔ∏è Oi {member.display_name}! Esta semana √© sua vez de cuidar da limpeza do escrit√≥rio. Lembre-se de tirar o lixo na sexta-feira e fique atento durante a semana! ‚ú®üßπ")
                        print(f"Lembrete semanal enviado para {member.display_name}")
                        enviado = True
                        break
                    except Exception as e:
                        print(f"N√£o consegui enviar lembrete semanal para {member.display_name}: {e}")
            if enviado:
                break

        if not enviado:
            print(f"Membro n√£o encontrado para lembrete semanal: {nome_mencao}")

    # Verifica se √© sexta-feira e 17:00 - lembrete do dia
    if agora.weekday() == 4 and agora.hour == 17 and agora.minute == 0:
        nome_mencao = rodizio[index_atual % len(rodizio)]
        nome_limpo = nome_mencao.lower().strip("@").replace(" ", "")

        enviado = False
        for guild in bot.guilds:
            for member in guild.members:
                member_name_clean = member.display_name.lower().replace(" ", "")
                if nome_limpo in member_name_clean or member_name_clean in nome_limpo:
                    try:
                        await member.send(f"Oi {member.display_name}! Hoje √© sua vez de tirar o lixo no escrit√≥rio! ‚ú®üö©üóëÔ∏è")
                        print(f"Mensagem enviada para {member.display_name}")
                        enviado = True
                        break
                    except Exception as e:
                        print(f"N√£o consegui enviar para {member.display_name}: {e}")
            if enviado:
                break

        if enviado:
            index_atual += 1
        else:
            print(f"Membro n√£o encontrado: {nome_mencao}")

def main():
    keep_alive()
    bot.run(BOT_TOKEN)

if __name__ == "__main__":
    main()
